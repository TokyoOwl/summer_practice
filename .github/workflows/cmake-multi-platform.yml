# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang


    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ github.workspace }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    - name: Install
      run: cmake --install . --config Release --prefix "./installdir"
    - name: Test on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        $env:PATH = "${{ github.workspace }}\installdir\bin;" + $env:PATH
        ctest -C ${{ matrix.build_type }} --verbose

    - name: Test on Linux
      if: runner.os != 'Windows'
      shell: bash
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: |
        export LD_LIBRARY_PATH="${{ github.workspace }}/installdir/bin:$LD_LIBRARY_PATH"
        ctest -C ${{ matrix.build_type }} --verbose
    - name: Zip Binaries
      shell: bash
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        zip -r binaries-${{ runner.os }}.zip installdir/bin

    - name: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ runner.os }}
        path: ${{ steps.strings.outputs.build-output-dir }}/binaries-${{ runner.os }}.zip
        
  source-archive:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
  
      - name: Create source archive
        run: |
          git archive --format=zip --output=source.zip HEAD
  
      - name: Upload SourceCode
        uses: actions/upload-artifact@v4
        with:
          name: source
          path: source.zip
  
  release:
    needs: [build, source-archive]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/source/source.zip
          artifacts/binaries-ubuntu-latest/binaries-ubuntu-latest.zip
          artifacts/binaries-windows-latest/binaries-windows-latest.zip
